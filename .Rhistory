# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
#PSEUDOCODE:
# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
#PSEUDOCODE:
# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
#PSEUDOCODE:
# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
#PSEUDOCODE:
# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
#PSEUDOCODE:
# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
#PSEUDOCODE:
# If contestant pick is the car, then open either of the remaining GOAT doors
# If contestant pick is NOT the car, then open only the other GOAT door
open_goat_door <- function( a.game, a.pick )
{
playerprize <- prizes.game[playerdoor]
return (prizes.game!=playerprize & prizes.game!="car")
#return( prizes.game[playerdoor] ) # number between 1 and 3
}
open_goat_door()
# test it
#this.game <- create_game()
#this.game
#my.initial.pick <- select_door()
#my.initial.pick
#open_goat_door( this.game, my.initial.pick )
knitr::opts_chunk$set(echo = TRUE)
#Load dataset:
# as URL <- "https://www.dropbox.com/s/tizgdsat2mziod6/medium-data-utf8.csv?dl=1"
URL <- "https://raw.githubusercontent.com/DS4PS/cpp-527-fall-2020/master/labs/data/medium-data-utf8-v2.csv"
d <- read.csv( URL )
preview.these <- c("title", "subtitle", "claps", "reading_time", "publication", "date")
head( d[preview.these] ) %>% pander()
#Load libraries:
library(dplyr)
#Load dataset:
# as URL <- "https://www.dropbox.com/s/tizgdsat2mziod6/medium-data-utf8.csv?dl=1"
URL <- "https://raw.githubusercontent.com/DS4PS/cpp-527-fall-2020/master/labs/data/medium-data-utf8-v2.csv"
d <- read.csv( URL )
preview.these <- c("title", "subtitle", "claps", "reading_time", "publication", "date")
head( d[preview.these] ) %>% pander()
#Load libraries:
library(dplyr)
library(pander)
#Load dataset:
# as URL <- "https://www.dropbox.com/s/tizgdsat2mziod6/medium-data-utf8.csv?dl=1"
URL <- "https://raw.githubusercontent.com/DS4PS/cpp-527-fall-2020/master/labs/data/medium-data-utf8-v2.csv"
d <- read.csv( URL )
preview.these <- c("title", "subtitle", "claps", "reading_time", "publication", "date")
head( d[preview.these] ) %>% pander()
# replace all versions of space
# including special styles like
# the 'hair space'  with regular spaces
d$title <- gsub( "\\s", " ", d$title )
hist( d$clap, main="Raw Clap Count",
xlim=c(1,950), breaks=5000, col="gray20", border="white" )
hist( log10(d$clap+1), main="Logged Clap Score",
col="gray20", border="white", breaks=100 )
d$clap.score <- log10( d$clap + 1 )
View(d)
title.howto <- grepl( /^How/gmi , d$titles )
title.question <- grepl('\\?'$  )
title.question <- grepl('\\?'$)
title.question <- grepl('\\?'$
title.question
title.question <- grepl('\\?$')
title.question <- grepl('\\?$',d$title)
title.question
title.question <- grep('\\?$',d$title)
title.question
title.question <- grepl('\\?$',d$title)
title.question
title.colon <- grepl(':', d$title)
title.colon
title.howto <- grepl("^How", d$title)
title.howto
title.powernumber <- grepl("^(One|Two|twenty|three|thirty|four|forty|five|fifty|six|seven|eight|nine|zero)|^(1:9)", d$title)
title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1:9)", d$title)
title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|(1:9)", d$title)
title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)"|(1:9), d$title)
title.powernumberword <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)", d$title)
title.powernumber
title.powernumberword <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)", d$title)
title.powernumberword
title.powernumber <- grepl("^(1:9)", d$title)
title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|\\d", d$title)
title.powernumber
#title.powernumber <- grepl("^1:9)", d$title)
#title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|[:num:]", d$title)
title.powernumber
#title.powernumber <- grepl("^1:9)", d$title)
#title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^[:num:]", d$title)
title.powernumber
#title.powernumber <- grepl("^1:9)", d$title)
#title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|[^:num:]", d$title)
title.powernumber
#title.powernumber <- grepl("^1:9)", d$title)
#title.powernumber
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title)
title.powernumber
#title.powernumber <- grepl("^1:9)", d$title)
#title.powernumber
d.categories <- d %>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title))
d.categories <- d %>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title))
d.categories
d.categories <- d %>%
select(title,clap.score)
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title),howto = grepl("^How", d$title), colon = grepl(':', d$title), question = grepl('\\?$',d$title), other = powernumber & howto & colon & question != TRUE )
d.categories <- d %>%
select(title,clap.score)
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title),howto = grepl("^How", d$title), colon = grepl(':', d$title), question = grepl('\\?$',d$title))
d.categories <- d %>%
select(title,clap.score)
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title))
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title)
title.howto <- grepl("^How", d$title)
title.colon <- grepl(':', d$title)
title.question <- grepl('\\?$',d$title)
d.categorytypes <- append(title.powernumber,title.howto,title.colon,title.question)
class(title.colon)
typeof(title.colon)
title.powernumber <- grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title)
sum(title.powernumber)
d.categories <- d %>%
select(title,clap.score)
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title))
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title))
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title), other = powernumber & howto & colon & question != TRUE)
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title), other = case-when(powernumber!=TRUE & howto!=TRUE & colon!=TRUE & question!=TRUE)~ TRUE)
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title), other = case_when(powernumber!=TRUE & howto!=TRUE & colon!=TRUE & question!=TRUE)~ TRUE)
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl("^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)", d$title), howto = grepl("^How", d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title)
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), howto = grepl('^How', d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title)
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), howto = grepl('^How', d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title))
d.categories
d.categoriesall <- d.categories %>%
mutate (other=case_when(powernumber!=TRUE & howto !=TRUE & colon!=TRUE & question!=TRUE)~TRUE)
d.categoriesall <- d.categories %>%
mutate (other=case_when(powernumber& howto & colon& question==FALSE)~TRUE)
d.categoriesall <- d.categories %>%
mutate (other=case_when((powernumber& howto & colon& question)==FALSE)~TRUE)
d.categoriesall <- d.categories %>%
group_by(title)%>%
mutate (other=case_when((powernumber& howto & colon& question)==FALSE)~TRUE)
d.categoriesall <- d.categories %>%
group_by(title)%>%
mutate (other=case_when((powernumber& howto & colon& question)==FALSE~TRUE))
d.categoriesall
d.categoriesall <- d.categories %>%
group_by(title)%>%
mutate (other=case_when((powernumber!=TRUE & howto!=TRUE & colon!=TRUE & question!=TRUE)~TRUE))
d.categoriesall
d.categories <- d %>%
select(title,clap.score)%>%
mutate(category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), "powernumber",
ifelse(grepl('^How', title ), "howto",
ifelse(grepl(':', title), "colon",
ifelse(grepl('\\?$',title), "question", "other"))
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), "powernumber",
ifelse(grepl('^How', d$title ), "howto",
ifelse(grepl(':', d$title), "colon",
ifelse(grepl('\\?$',d$title), "question", "other"))
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), 'powernumber',
ifelse(grepl('^How', d$title ), 'howto',
ifelse(grepl(':', d$title), 'colon',
ifelse(grepl('\\?$',d$title), 'question', 'other'))
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), 'powernumber',
ifelse(grepl('^How', d$title ), 'howto',
ifelse(grepl(':', d$title), 'colon',
ifelse(grepl('\\?$',d$title), 'question', 'other')))
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), 'powernumber',
ifelse(grepl('^How', d$title ), 'howto',
ifelse(grepl(':', d$title), 'colon',
ifelse(grepl('\\?$',d$title), 'question', 'other')))
d.categories
d.categories <- d %>%
select(title,clap.score)%>%
mutate(powernumber = grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', d$title), howto = grepl('^How', d$title ), colon = grepl(':', d$title), question = grepl('\\?$',d$title))
d.categories
d.new <- mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), "powernumber",
ifelse(grepl('^How', title), "howto",
ifelse(grepl(':', title), "colon",
ifelse(grepl('\\?$',title), "question", "Other") ))
d.new
d.new <- mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), 'powernumber',
ifelse(grepl('^How', title), 'howto',
ifelse(grepl(':', title), 'colon',
ifelse(grepl('\\?$',title), 'question', 'Other') ))
d.new
d.new <- mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), 'powernumber',
ifelse(grepl('^How', title), 'howto',
ifelse(grepl(':', title), 'colon',
ifelse(grepl('\\?$',title), 'question') ))
d.new
d.new <- mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), "powernumber",
ifelse(grepl('^How', title), "howto",
ifelse(grepl(':', title), "colon",
ifelse(grepl('\\?$',title), "question")))
d.new
d$clap.score <- log10( d$clap + 1 )
#Load libraries:
library(dplyr)
library(pander)
#Load dataset:
# as URL <- "https://www.dropbox.com/s/tizgdsat2mziod6/medium-data-utf8.csv?dl=1"
URL <- "https://raw.githubusercontent.com/DS4PS/cpp-527-fall-2020/master/labs/data/medium-data-utf8-v2.csv"
d <- read.csv( URL )
preview.these <- c("title", "subtitle", "claps", "reading_time", "publication", "date")
head( d[preview.these] ) %>% pander()
# replace all versions of space
# including special styles like
# the 'hair space'  with regular spaces
d$title <- gsub( "\\s", " ", d$title )
hist( d$clap, main="Raw Clap Count",
xlim=c(1,950), breaks=5000, col="gray20", border="white" )
hist( log10(d$clap+1), main="Logged Clap Score",
col="gray20", border="white", breaks=100 )
d$clap.score <- log10( d$clap + 1 )
d.new <- mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), "powernumber",
ifelse(grepl('^How', title), "howto",
ifelse(grepl(':', title), "colon",
ifelse(grepl('\\?$',title), "question")))
d.new <- mutate(d, category =
d.new <- mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), "powernumber",
ifelse(grepl('^How', title), "howto",
ifelse(grepl(':', title), "colon",
ifelse(grepl('\\?$',title), "question",)))
d.new
print(d.new)
mutate(d, category =
ifelse(grepl('^(One|Two|Twenty|Three|Thirty|Four|Forty|Five|Fifty|Six|Seven|Eight|Nine|Zero)|^(1|2|3|4|5|6|7|8|9|0)', title), "powernumber",
ifelse(grepl('^How', title), "howto",
ifelse(grepl(':', title), "colon",
ifelse(grepl('\\?$',title), "question",)))
head( d) %>% pander()
head(d)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
doors10 <- c(1:10) #create a vector of doors
# prizes <- c(rep("car",1),rep("goat",9))#create a vector of prizes
# sample( prizes, size=10, replace=F)
# available.car.doors <- paste(c(1,2,3), collapse = "")
# cat(available.car.doors, sep = "")
# # available.car.doors<-c(available.car.doors)
# available.car.doors <-gsub("\\s", "", available.car.doors)
# available.car.doors
# cat(available.car.doors, sep = "")
create_game10 <- function(car.amount, goat.amount)
{
#create a vector of prizes that will be responsive to the arguments in the function
prizes <- c(rep("car",car.amount),rep("goat",goat.amount))
#create the game vector that will randomly choose (sample) the values and return however many is specified in door amount
a.game <- sample( x=prizes, size=10, replace=F )
return( a.game )
}
#UNIT TEST:
new.game10 <- create_game10(1,9)
new.game10
select_door10 <- function()
{
a.pick <- sample( x=doors10, size=1 )   #randomly choose 1 (size=1) selection from the vector
return( a.pick )  # number between 1 and 3
}
#UNIT TEST:
first.pick10 <- select_door10()
first.pick10
open_door10 <- function( game, a.pick )  #the names of these arguments are not important - they are placeholders and when we USE the function later we will pass arguments to this function, matching them to these placeholders
{
#available.doors <- doors[ doors !=my.initial.pick]
available.doors <- doors10[doors10 !=a.pick & game =="goat"]
#available.doors <- c(available.doors)
opened.door <- if(length(available.doors) == 1) {available.doors}  #why does the sample() not work if only one value???
else {sample(x=available.doors, size=1, replace=F)}
return(opened.door)
}
#UNIT TEST:
opened.door10 <- open_door10( game=new.game10, a.pick=first.pick10 )
opened.door10
change_door10 <- function( stay=T, opened.door, a.pick )
{
if( stay )
{
final.pick <- a.pick
}
if( ! stay )
{
used.doors<- c(opened.door,a.pick)
remaining.doors<-c(doors10[-used.doors])
final.pick <- sample( x=remaining.doors, size=1 )
}
return( final.pick )  # number between 1 and 3
}
#UNIT TEST:
final.pick.stay10 <- change_door10( stay=T, opened.door=opened.door10, a.pick=first.pick10 )
final.pick.stay10
final.pick.switch10 <- change_door10( stay=F, opened.door=opened.door10, a.pick=first.pick10 )
final.pick.switch10
determine_winner10 <- function( final.pick, game )
{
if( game[ final.pick ] == "car" )
{
return( "WIN" )
}
if( game[ final.pick ] == "goat" )
{
return( "LOSE" )
}
}
#UNIT TEST:
outcome.stay10 <- determine_winner10( final.pick=final.pick.stay10, game=new.game10  )
outcome.stay10
outcome.switch10 <- determine_winner10( final.pick=final.pick.switch10, game=new.game10 )
outcome.switch10
play_game10 <- function(car.amount, goat.amount)
{
new.game10 <- create_game10(car.amount,goat.amount)
first.pick10 <- select_door10()
opened.door10 <- open_door10( new.game10, first.pick10 )
final.pick.stay10 <- change_door10( stay=T, opened.door10, first.pick10 )
final.pick.switch10 <- change_door10( stay=F, opened.door10, first.pick10 )
outcome.stay10 <- determine_winner10( final.pick.stay10, new.game10  )
outcome.switch10 <- determine_winner10( final.pick.switch10, new.game10 )
#to test individual steps (comment out before running simulation!)
# print(paste("new.game:" ,new.game10))
# print(paste("first.pick:" ,first.pick10))
# print(paste("opened.door:" ,opened.door10))
# print(paste("final.pick.stay:" ,final.pick.stay10))
# print(paste(" outcome.stay:" , outcome.stay10))
# print(paste("final.pick.switch:" ,final.pick.switch10))
# print(paste(" outcome.switch:" , outcome.switch10))
# game.results <- bundle the results
# return( <<< game.results >>> )
strategy <- c("stay","switch")
outcome <- c(outcome.stay10,outcome.switch10)
game.results <- data.frame( strategy, outcome,
stringsAsFactors=F )
return( game.results )
}
# To play game, user will need to specify (car.amount, goat.amount)
# In this game, the host will open TWO doors after the initial
play_game10(1,9)
play_game10(2,8)
play_game10(3,7)
results.onecar.df <- NULL   # collector
for( i in 1:10000 )  # iterator
{
game.outcome <- play_game10(1,9)
# binding step
results.onecar.df <- rbind( results.onecar.df, game.outcome )
}
results.twocar.df <- NULL   # collector
for( i in 1:10000 )  # iterator
{
game.outcome <- play_game10(2,8)
# binding step
results.twocar.df <- rbind( results.twocar.df, game.outcome )
}
results.threecar.df <- NULL   # collector
for( i in 1:10000 )  # iterator
{
game.outcome <- play_game10(3,7)
# binding step
results.threecar.df <- rbind( results.threecar.df, game.outcome )
}
table( results.onecar.df )
table( results.twocar.df )
table( results.threecar.df )
( table( results.onecar.df ) / 10000 ) %>%
round( 2 )
( table( results.twocar.df ) / 10000 ) %>%
round( 2 )
( table( results.threecar.df ) / 10000 ) %>%
round( 2 )
setwd( "montyhall" )
getwd()
setwd( "montyhall" )
setwd( "montyhall" )
setwd( "montyhall" )
